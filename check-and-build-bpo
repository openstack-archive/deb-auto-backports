#!/bin/sh

set -e
set -x

HERE=$(pwd)
LAST_GIT_COMMIT=$(git log | head -n 1 | awk '{print $2}')

if ! [ -r /etc/pkgos/pkgos.conf ] ; then
   echo "Could not read /etc/pkgos/pkgos.conf"
   exit 1
else
   . /etc/pkgos/pkgos.conf
fi

# Parse params for the bb (build backport) function.
# This is also useful here, as we'll parse each lines of the sid-list
. ${HERE}/bb-parse-params

if ! [ -r /etc/nodepool/provider ] ; then
    echo "Could not read /etc/nodepool/provider"
    exit 1
else
    . /etc/nodepool/provider
    NODEPOOL_MIRROR_HOST=${NODEPOOL_MIRROR_HOST:-mirror.$NODEPOOL_REGION.$NODEPOOL_CLOUD.openstack.org}
    NODEPOOL_MIRROR_HOST=$(echo $NODEPOOL_MIRROR_HOST|tr '[:upper:]' '[:lower:]')
fi

cleanup_data () {
    rm -rf ${HERE}/etc
    rm -f ${HERE}/rebuild-list
    rm -rf bpo-src uploads
}

add_bpo_repo_to_sbuild () {
    echo "deb http://${NODEPOOL_MIRROR_HOST}/debian-openstack jessie-newton-backports main
deb-src http://${NODEPOOL_MIRROR_HOST}/debian-openstack jessie-newton-backports main
" >/tmp/jessie-newton-backports.list
    sudo cp /tmp/jessie-newton-backports.list /var/lib/sbuild/jessie-newton-backports/etc/apt/sources.list.d/jessie-newton-backports.list
    sudo sbuild-update -udcar jessie-newton-backports-amd64-sbuild
}

make_ssh_keys () {
    # Create ssh key
    if ! [ -e ~/.ssh/id_rsa ] ; then
        ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
    fi
    cat ~/.ssh/id_rsa.pub >>~/.ssh/authorized_keys
    cat ~/.ssh/id_rsa.pub >>~/.ssh/authorized_keys2
}

# param: $1 = name of mirror
#        $2 = repo URL
make_fake_mirror () {
   NAME_OF_MIRROR=${1}
   FETCH_REPO_URL=${2}
   # Create the folder and remove the Packages.gz / Sources.gz
   DEST_DIST_DIR=${HERE}/etc/pkgos/fake-${NAME_OF_MIRROR}-mirror/dists/${NAME_OF_MIRROR}/main
   for BINARY_ARCH in binary-all binary-amd64 source ; do
      if ! [ -d ${DEST_DIST_DIR}/${BINARY_ARCH} ] ; then
         mkdir -p ${DEST_DIST_DIR}/${BINARY_ARCH}
      fi
      if [ "${BINARY_ARCH}" = "source" ] ; then
         LISTFILE=Sources
      else
         LISTFILE=Packages
      fi
      ARCHIVE=''
      for FILE_EXTENSION in gz bz2 xz ; do
          LINK_TO_LISTFILE=${FETCH_REPO_URL}/dists/${NAME_OF_MIRROR}/main/${BINARY_ARCH}}/${LISTFILE}.${FILE_EXTENSION}
          HTTP_CODE=$(curl -sL -w "%{http_code}" "${LINK_TO_LISTFILE}" -o /dev/null)
          if [ "$HTTP_CODE" = "200" ] ; then
              if [ "${FILE_EXTENSION}" = 'xz' ] ; then
                  echo 'madison-lite (v0.21) does not support XZ (LZMA/LZMA2 compression algorithms).'
                  # TODO(tlbr): Provide workaround and remove it once newer version of madison-lite is out.
              fi
              ARCHIVE=${LISTFILE}.${FILE_EXTENSION}
          fi
      fi
      if ! [ -z $ARCHIVE ] ; then
          rm -f ${DEST_DIST_DIR}/${BINARY_ARCH}/${ARCHIVE}
          wget ${FETCH_REPO_URL}/dists/${NAME_OF_MIRROR}/main/${BINARY_ARCH}/${ARCHIVE} -O ${DEST_DIST_DIR}/${BINARY_ARCH}/${ARCHIVE}
      else
          echo "There is no ${LISTFILE} archive to work with."
      fi
   done
}

# param: $1 = sid or experimental
decide_to_build_or_not () {
    set +x
    # Strip commented out and empty lines, and iterate through them
    TMPFILE=$(mktemp -t stripped-list.XXXXXX)
    cat packages-list | grep -E -v '^[ \t]*#' | grep -E -v '^$' >${TMPFILE}
    while read PKG_SOURCE_LINE ; do
        bb_parse_params ${PKG_SOURCE_LINE}
        if [ "${DOWNLOAD_FROM_JESSIE_BACKPORTS}" = "yes" ] ; then
            echo "===> Checking status of ${PKG_NAME}:"
            JESSIE_BPO_VERSION=$(madison-lite -a source --mirror ${HERE}/etc/pkgos/fake-jessie-backports-mirror ${PKG_NAME} | awk '{print $3}' | tail -n 1)
            echo "Jessie BPO version: ${JESSIE_BPO_VERSION}"
            OUR_VERSION=$(madison-lite -a source --mirror ${HERE}/etc/pkgos/fake-jessie-newton-backports-mirror ${PKG_NAME} | awk '{print $3}' | tail -n 1)
            if [ -z "${OUR_VERSION}" ] ; then
                echo "Our version: missing package"
                echo "Decision: download"
                echo ${PKG_SOURCE_LINE} >>rebuild-list
            else
                echo "Our version: ${OUR_VERSION}"
                if [ "${JESSIE_BPO_VERSION}" = "${OUR_VERSION}" ] ; then
                    echo "Decision: skip"
                else
                    echo "Decision: download"
                    echo ${PKG_SOURCE_LINE} >>rebuild-list 
                fi
            fi
        else
            echo "===> Checking status of ${PKG_NAME}:"
            DEBREPO_VERSION=$(madison-lite -a source --mirror ${HERE}/etc/pkgos/fake-${SRC_DISTRO}-mirror ${PKG_NAME} | awk '{print $3}' | tail -n 1)
            echo "${SRC_DISTRO} version: ${DEBREPO_VERSION}"
            OUR_VERSION=$(madison-lite -a source --mirror ${HERE}/etc/pkgos/fake-jessie-newton-backports-mirror ${PKG_NAME} | awk '{print $3}' | tail -n 1)
            if [ -z "${OUR_VERSION}" ] ; then
                echo "Our version: missing package"
                echo "Decision: rebuild"
                echo ${PKG_SOURCE_LINE} >>rebuild-list
            else
                echo "Our version: ${OUR_VERSION}"
                # Strip the added version number from our version"
                STRIPPED_BPO_VERS=$(echo ${OUR_VERSION} | sed 's#\+[0-9]*~bpo8+1##')
                STRIPPED_BPO_VERS=$(echo ${STRIPPED_BPO_VERS} | sed 's#~bpo8+1##')
                echo "Stripped version: ${STRIPPED_BPO_VERS}"
                # Check if we have lower version
                if dpkg --compare-versions ${STRIPPED_BPO_VERS} lt ${DEBREPO_VERSION} ; then
                    echo "Decision: rebuild"
                    echo ${PKG_SOURCE_LINE} >>rebuild-list
                else
                    echo "Decision: skip"
                fi
            fi
        fi
    done < $TMPFILE
    rm $TMPFILE
    set -x
    echo "===> Rebuild list:"
    cat rebuild-list
}

# param: $1 = sid or experimental
rebuild_all_bpo () {
    echo "Build list is:"
    cat ${HERE}/rebuild-list

    NUM_LINES=$(cat ${HERE}/rebuild-list | wc -l)
    while ! [ ${NUM_LINES} = 0 ] ; do
        LINE=$(cat ${HERE}/rebuild-list | tail -n ${NUM_LINES} | head -n 1)
        echo "### REBUILDING ${LINE} ###"
        ./bb ${LINE}
        NUM_LINES=$(($NUM_LINES - 1))
    done
}

cleanup_data
#add_bpo_repo_to_sbuild
make_ssh_keys
make_fake_mirror jessie-newton-backports http://${NODEPOOL_MIRROR_HOST}/debian-openstack
make_fake_mirror jessie-backports http://httpredir.debian.org/debian
make_fake_mirror sid http://httpredir.debian.org/debian
make_fake_mirror experimental http://httpredir.debian.org/debian
decide_to_build_or_not
set -x
rebuild_all_bpo

TARGET_FTP_FOLDER=${HERE}/uploads/${LAST_GIT_COMMIT}
set +x
echo "############################"
echo "### Done! List of files: ###"
echo "############################"
ls -lah ${TARGET_FTP_FOLDER}
